"""autogenerated by genmsg_py from speed_commandRequest.msg. Do not edit."""
import roslib.message
import struct


class speed_commandRequest(roslib.message.Message):
  _md5sum = "e347a3628b1c0f3e9df84fb46b6a66b3"
  _type = "command_msgs/speed_commandRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 robot_index
char type
float32 Vleft
float32 Vright
float32 Vtop
int32 div

"""
  __slots__ = ['robot_index','type','Vleft','Vright','Vtop','div']
  _slot_types = ['int32','char','float32','float32','float32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       robot_index,type,Vleft,Vright,Vtop,div
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(speed_commandRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robot_index is None:
        self.robot_index = 0
      if self.type is None:
        self.type = 0
      if self.Vleft is None:
        self.Vleft = 0.
      if self.Vright is None:
        self.Vright = 0.
      if self.Vtop is None:
        self.Vtop = 0.
      if self.div is None:
        self.div = 0
    else:
      self.robot_index = 0
      self.type = 0
      self.Vleft = 0.
      self.Vright = 0.
      self.Vtop = 0.
      self.div = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_iB3fi.pack(_x.robot_index, _x.type, _x.Vleft, _x.Vright, _x.Vtop, _x.div))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.robot_index, _x.type, _x.Vleft, _x.Vright, _x.Vtop, _x.div,) = _struct_iB3fi.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_iB3fi.pack(_x.robot_index, _x.type, _x.Vleft, _x.Vright, _x.Vtop, _x.div))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 21
      (_x.robot_index, _x.type, _x.Vleft, _x.Vright, _x.Vtop, _x.div,) = _struct_iB3fi.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_iB3fi = struct.Struct("<iB3fi")
"""autogenerated by genmsg_py from speed_commandResponse.msg. Do not edit."""
import roslib.message
import struct


class speed_commandResponse(roslib.message.Message):
  _md5sum = "535618ecc8af18c0ef09ade39cc7f6c8"
  _type = "command_msgs/speed_commandResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool error


"""
  __slots__ = ['error']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       error
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(speed_commandResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.error is None:
        self.error = False
    else:
      self.error = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      buff.write(_struct_B.pack(self.error))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 1
      (self.error,) = _struct_B.unpack(str[start:end])
      self.error = bool(self.error)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      buff.write(_struct_B.pack(self.error))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.error,) = _struct_B.unpack(str[start:end])
      self.error = bool(self.error)
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_B = struct.Struct("<B")
class speed_command(roslib.message.ServiceDefinition):
  _type          = 'command_msgs/speed_command'
  _md5sum = 'b92633d2045f118521cf5b24ea085990'
  _request_class  = speed_commandRequest
  _response_class = speed_commandResponse
